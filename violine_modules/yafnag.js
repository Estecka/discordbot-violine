const Reply = require("../Reply.js");
const Interpreter = require("../Interpreter.js");
const Violine = require("../violine.js");
const xmlrpc = require("xmlrpc");
const { DataResolver } = require("discord.js");


var client = xmlrpc.createSecureClient({
	url: "https://dicelog.com/yaf/rpc",
	port: 80,
});

commands = {
	yafnag: {

		help: ()=>"Yet Another Fantasy Name Generator\n"
			+ "`v!Yafnag [sizeMin] [sizeMax] [amount]`",

		main: function (sentence) {
			let params = Interpreter.SplitSentence(sentence);
			if (params[0] == "--help")
				return Reply.Say("yafnag `sizeMin` `sizeMax` `amount`");

			if (params.length != 3)
				return Reply.invalid;

			let p = [];
			for(let i in params){
				p.push(parseInt(params[i]));
				if (isNaN(p[i]))
					return Reply.invalid;
			}

			return new Promise(function(resolve, reject) {
				client.methodCall( "names", p, (error, result)=>{
					if (error){
						console.warn("Error: "+error);
						console.warn("req headers:" + error.req && error.req._header);
						console.warn('res code:', error.res && error.res.statusCode);
						console.warn('res body:', error.body);
						resolve(Reply.Error("Dicelog returned an error"));
					}
					else{
						let r = Reply.Say(undefined);
						r.embed.author = {
							name: "ðŸ“œ Yafnag",
							url: "http://dicelog.com/yafnag",
						}
						r.embed.description = result;
						r.embed.thumbnail = {url: "https://dicelog.com/inc2/yafnag.gif"};
						r.embed.footer = { text: "Names generated by Dicelog.com" };
						resolve(r);
					}
				});
			});
		},

	},
};


module.exports = commands;
var Violine = require("../violine.js");
var xmlrpc = require("xmlrpc");
var Reply = require("../Reply.js");


var client = xmlrpc.createSecureClient({
	url: "https://dicelog.com/yaf/rpc",
	port: 80,
});

yafnag = {};
yafnag["v!yafnag"] = {
	_isLegacy: true,
	help: ()=>"Yet Another Fantasy Name Generator\n"
	+ "`v!Yafnag [sizeMin] [sizeMax] [amount]`",
	Invoke: function (params, channel) {
		throw "Method prototype no longer supported.";
		if (params.length<3)
			return Reply.invalid;
		
		let p = [];
		for(let i in params){
			p.push(parseInt(params[i]));
			if (isNaN(p[i]))
				return Reply.invalid;
		}

		client.methodCall( "names", p, (error, result)=>{
			if (error){
				console.warn("Error: "+error);
				console.warn("req headers:" + error.req && error.req._header);
				console.warn('res code:', error.res && error.res.statusCode);
				console.warn('res body:', error.body);
				Violine.Send(Reply.Error("Dicelog returned an error"), channel);
			}
			else{
				let r = Reply.Say(undefined);
				r.embed.author = { 
					name: "ðŸ“œ Yafnag",
					url: "http://dicelog.com/yafnag",
				}
				r.embed.description = result;
				r.embed.thumbnail = {url: "https://dicelog.com/inc2/yafnag.gif"};
				r.embed.footer = { text: "Names generated by Dicelog.com" };
				Violine.Send(r, channel);
			}
		});
	},
};


module.exports = yafnag;